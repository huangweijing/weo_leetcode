from typing import List

class Solution:

    def __init__(self):
        self.from_left = list[list[int]]()
        self.from_top = list[list[int]]()
        self.width = list[list[int]]()
        self.height = list[list[int]]()
        self.size = list[list[int]]()

    def maximalRectangle(self, matrix: List[List[str]]) -> int:
        self.from_left = [[0] * len(matrix[0]) for i in range(len(matrix))]
        self.from_top = [[0] * len(matrix[0]) for i in range(len(matrix))]
        self.width = [[0] * len(matrix[0]) for i in range(len(matrix))]
        self.height = [[0] * len(matrix[0]) for i in range(len(matrix))]
        self.size = [[0] * len(matrix[0]) for i in range(len(matrix))]
        maximum_size = 0
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] == "0":
                    continue
                # if i == j == 0:
                #     self.from_top[i][j] = 1
                #     self.from_left[i][j] = 1
                #     self.width[i][j] = 1
                #     self.height[i][j] = 1
                if i > 0 and matrix[i - 1][j] != "0":
                    self.from_top[i][j] = self.from_top[i - 1][j] + 1
                else:
                    self.from_top[i][j] = 1
                    self.height[i][j] = 1
                if j > 0 and matrix[i][j - 1] != "0":
                    self.from_left[i][j] = self.from_left[i][j - 1] + 1
                else:
                    self.from_left[i][j] = 1
                    self.width[i][j] = 1
                if i > 0 and j > 0 and self.from_left[i - 1][j - 1] != "0":
                    self.height[i][j] = self.height[i - 1][j - 1] + 1
                    if self.from_top[i][j] < self.height[i][j]:
                        self.height[i][j] = self.from_top[i][j]
                    self.width[i][j] = self.width[i - 1][j - 1] + 1
                    if self.from_left[i][j] < self.width[i][j]:
                        self.width[i][j] = self.from_left[i][j]
                elif i == 0:
                    self.height[i][j] = 1
                    self.width[i][j] = self.from_left[i][j]
                elif j == 0:
                    self.width[i][j] = 1
                    self.height[i][j] = self.from_top[i][j]

                self.size[i][j] = max(self.height[i][j] * self.width[i][j], self.from_left[i][j], self.from_top[i][j])
                if self.size[i][j] > maximum_size:
                    maximum_size = self.size[i][j]
        print(self.height)
        print(self.width)
        print(self.from_top)
        print(self.from_left)
        print(self.size)
        return maximum_size

# m = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
# m = [["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"]]
# m = [["1","1","1","1","1"],["1","1","1","1","1"],["1","1","1","1","1"]]
m = [["1","0","1","0"],["1","0","1","1"],["1","0","1","1"],["1","1","1","1"]]
r = Solution().maximalRectangle(m)
print(r)


