import bisect
import math

class Solution:

    def threeSumClosest(self, nums: list[int], target: int) -> int:
        nums.sort()
        nums_len = len(nums)
        min_distance = math.inf
        result = 0
        idx3rd = nums_len - 1
        for i in range(nums_len - 2):
            j = i + 1
            while j < idx3rd:
                # print(i, j, idx3rd, f"i={nums[i]} j={nums[j]} idx3rd={nums[idx3rd]}"
                #       , nums[i] + nums[j] + nums[idx3rd])
                distance = abs(nums[i] + nums[j] + nums[idx3rd] - target)
                if min_distance > distance:
                    result = nums[i] + nums[j] + nums[idx3rd]
                    min_distance = distance
                    if min_distance == 0:
                        return result

                while nums[i] + nums[j] + nums[idx3rd - 1] >= target and idx3rd - 1 > j:
                    distance = abs(nums[i] + nums[j] + nums[idx3rd - 1] - target)
                    if min_distance > distance:
                        result = nums[i] + nums[j] + nums[idx3rd - 1]
                        min_distance = distance
                        if min_distance == 0:
                            return result
                    idx3rd -= 1
                j += 1
                if j >= idx3rd:
                    break

        return result

data_nums = [-982, -978, -976, -975, -952, -941, -924, -913, -898, -889, -872, -868, -850, -843, -834, -828, -823, -818, -816, -810, -781, -767, -762, -758, -747, -725, -720, -709, -700, -699, -677, -672, -669, -666, -654, -651, -650, -643, -642, -638, -608, -603, -597, -595, -561, -559, -555, -550, -533, -523, -517, -506, -500, -491, -486, -483, -478, -477, -467, -452, -448, -430, -418, -408, -400, -393, -378, -367, -352, -342, -340, -338, -336, -330, -325, -323, -313, -311, -305, -299, -298, -296, -294, -288, -287, -257, -249, -247, -246, -244, -241, -239, -237, -213, -200, -180, -171, -167, -159, -156, -139, -135, -129, -124, -117, -113, -103, -102, -90, -87, -69, -60, -58, -49, -48, -45, -17, -13, 34, 43, 58, 65, 68, 70, 75, 83, 101, 123, 138, 141, 147, 161, 172, 173, 180, 187, 189, 192, 197, 198, 230, 267, 272, 285, 289, 296, 297, 298, 301, 315, 320, 322, 331, 343, 349, 364, 380, 388, 402, 405, 428, 443, 470, 471, 476, 488, 513, 522, 523, 527, 536, 541, 544, 546, 556, 575, 580, 584, 605, 606, 607, 611, 640, 646, 649, 657, 658, 673, 678, 680, 698, 703, 705, 707, 718, 736, 763, 766, 772, 781, 783, 795, 796, 812, 839, 841, 850, 860, 861, 862, 866, 876, 880, 904, 906, 908, 918, 919, 922, 934, 935, 951, 978, 979, 999]
data_target = -2549
data_nums.sort()
print(data_nums)
# data = [-982, -978, -976, -975, -952, -941, -924, -913, -898, -889, -872, -868, -850, -843, -834, -828, -823, -818, -816, -810, -781, -767, -762, -758, -747, -725, -720, -709, -700, -699, -677, -672, -669, -666, -654, -651, -650, -643, -642, -638, -608, -603, -597, -595, -561, -559, -555, -550, -533, -523, -517, -506, -500, -491, -486, -483, -478, -477, -467, -452, -448, -430, -418, -408, -400, -393, -378, -367, -352, -342, -340, -338, -336, -330, -325, -323, -313, -311, -305, -299, -298, -296, -294, -288, -287, -257, -249, -247, -246, -244, -241, -239, -237, -213, -200, -180, -171, -167, -159, -156, -139, -135, -129, -124, -117, -113, -103, -102, -90, -87, -69, -60, -58, -49, -48, -45, -17, -13, 34, 43, 58, 65, 68, 70, 75, 83, 101, 123, 138, 141, 147, 161, 172, 173, 180, 187, 189, 192, 197, 198, 230, 267, 272, 285, 289, 296, 297, 298, 301, 315, 320, 322, 331, 343, 349, 364, 380, 388, 402, 405, 428, 443, 470, 471, 476, 488, 513, 522, 523, 527, 536, 541, 544, 546, 556, 575, 580, 584, 605, 606, 607, 611, 640, 646, 649, 657, 658, 673, 678, 680, 698, 703, 705, 707, 718, 736, 763, 766, 772, 781, 783, 795, 796, 812, 839, 841, 850, 860, 861, 862, 866, 876, 880, 904, 906, 908, 918, 919, 922, 934, 935, 951, 978, 979, 999]

# data_target = -2805
# print(len(data_nums))
# # [1,2,5,10,11], 12
sol = Solution()
# print("--------")
r = sol.threeSumClosest(data_nums, data_target)
print(r)